# sig {params(url: String).returns(T::Array[T.untyped])}
# def get_path_structure(url)
#   path_structure = Array.new
#   uri = URI.parse(url)
#   uri.path&.split('/')&.each do |part|
#     next if part == ''
#     if /\d+/ === part
#       path_structure.push :num
#     elsif ['blog', 'posts', 'post'].include? part
#       path_structure.push(part)
#       else
#       path_structure.push :str
#     end
#   end
#   path_structure
# end

# sig {params(url: String).returns(T::Array[T.untyped])}
# def find_posts(url)
#   # Assumptions:
#   #   - all posts can be reached via links from the base URL
#   #   - blog posts will have a similar path structure
#   uri = URI.parse(url)
#   root = "#{uri.scheme}://#{uri.host}"
#   visited = Set.new
#   queue = [root]
#   while cur_path = queue.shift
#     if !visited.include? cur_path
#       visited.add cur_path
#       response = HTTParty.get cur_path
#       if response.headers['content-type'].include? 'text/html'
#         html = Nokogiri::HTML(response.parsed_response)
#         html.xpath('//a').each do |a|
#           link = a['href']
#           if link.start_with? '/'
#             link = "#{root}#{link}"
#           end
#           if link.start_with? root
#             link_uri = URI.parse(link)
#             queue.push "#{link_uri.scheme}://#{link_uri.host}#{link_uri.path}"
#           end
#         end
#       end
#     end
#   end
#   post_path_structure = get_path_structure(url)
#   visited.select{ |path| get_path_structure(path) == post_path_structure }
# end

